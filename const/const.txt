The CONST keyword was introduced in ES6(2015).

Variables defined with CONST cannot be Redeclared.

Variables defined with CONST cannot be Reassigned.

Variables defined with CONST have Block scope.


Cannot be Reassigned:
~~~~~~~~~~~~~~~~~~~~~

A variable defined with the CONST keyword cannot e Reassigned:

const PI = 3.141592653589793;
PI = 3.14;  // this will given an error 
PI = PI + 10; //this will also give an error


Must be Assigned:
~~~~~~~~~~~~~~~~~

JavaScript const variables must be assigned a value when they are declared:


When to use JavaScript const?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Always declare a variable with const when you know that the value should not be changed.

Use const when you declare:

* A new Array
* A new Object
* A new Function
* A new RegExp


Constant Object and Arrays :
~~~~~~~~~~~~~~~~~~~~~~~~~~~
The keyword const is a little misleading.

It does not define a Constant value.

It defines a Constant reference to a value.

Because of this you can NOT:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Reassign a constant value
Reassign a constant array
Reassign a constant object
But you CAN:

Change the elements of constant array
Change the properties of constant object


Constant Arrays:
~~~~~~~~~~~~~~~~
you can change the elememts of a constant array:


// You can create a constant array:
const cars = ["Saab", "Volvo", "BMW"];

// You can change an element:
cars[0] = "Toyota";

// You can add an element:
cars.push("Audi");



Constant Objects:
~~~~~~~~~~~~~~~~
You can change the properties of a constant object:

Example
// You can create a const object:
const car = {type:"Fiat", model:"500", color:"white"};

// You can change a property:
car.color = "red";

// You can add a property:
car.owner = "Sirisha";


But you can NOT reassign the object:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Example:
~~~~~~~
const car = {type:"Fiat", model:"500", color:"white"};

car = {type:"Volvo", model:"EX60", color:"red"};    // ERROR


Block Scope:
~~~~~~~~~~~~
Declaring a variable with const is similar to let when it comes to Block Scope.

const x = 10;
// Here x is 10

{
const x = 2;
// Here x is 2
}

// Here x is 10

Redeclaring:
~~~~~~~~~~~
Redeclaring a JavaScript var variable is allowed anywhere in a program:
var x = 2;     // Allowed
var x = 3;     // Allowed
x = 4;         // Allowed


Variables defined with const are also hoisted to the top, but not initialized.

Meaning: Using a const variable before it is declared will result in a ReferenceError:

alert (carName);
const carName = "Volvo";

